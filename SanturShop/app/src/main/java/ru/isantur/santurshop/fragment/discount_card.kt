package ru.isantur.santurshop.fragmentimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.appcompat.app.AppCompatActivityimport androidx.fragment.app.Fragmentimport androidx.recyclerview.widget.DividerItemDecorationimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport io.reactivex.android.schedulers.AndroidSchedulersimport io.reactivex.disposables.CompositeDisposableimport io.reactivex.schedulers.Schedulersimport kotlinx.android.synthetic.main.element_item_rv.view.*import kotlinx.android.synthetic.main.fragment_discount_card.*import kotlinx.android.synthetic.main.fragment_discount_card.view.*import kotlinx.android.synthetic.main.fragment_favorite.*import kotlinx.android.synthetic.main.include_appbar.*import kotlinx.android.synthetic.main.include_status.*import kotlinx.android.synthetic.main.profile_home.*import moxy.InjectViewStateimport moxy.MvpAppCompatFragmentimport moxy.MvpPresenterimport moxy.MvpViewimport moxy.presenter.InjectPresenterimport moxy.viewstate.strategy.OneExecutionStateStrategyimport moxy.viewstate.strategy.StateStrategyTypeimport ru.isantur.santurshop.AppResponseimport ru.isantur.santurshop.Data.Cartimport ru.isantur.santurshop.Data.DiscountCartimport ru.isantur.santurshop.Rimport ru.isantur.santurshop.activity.Mainimport ru.isantur.santurshop.di.BackendModuleimport ru.isantur.santurshop.fragment.discount_card.Companion.arr_dcimport ru.isantur.santurshop.fragment.discount_card.Companion.arr_dc2import ru.isantur.santurshop.fragment.discount_card.Companion.dcimport ru.isantur.santurshop.fragment.profile.profile_homeimport ru.isantur.santurshop.varAppimport javax.inject.Inject@StateStrategyType(value = OneExecutionStateStrategy::class)interface DC_ViewState: MvpView {    fun onSuccess()    fun noInternet ()    fun isEmpty()}class discount_card: MvpAppCompatFragment(), DC_ViewState  {    @InjectPresenter lateinit var dc_presenter: dc_Presenter    companion object {        fun instance (): Fragment {            return discount_card()        }        lateinit var v: View        lateinit var dc: DiscountCart        val arr_dc: ArrayList<String> = ArrayList()        val arr_dc2: ArrayList<String> = ArrayList()    }    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {        v = inflater.inflate(R.layout.fragment_discount_card, container, false)        return v    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        varApp.nav_view.visibility = View.VISIBLE        onLoad()        onEvents()    }    fun onLoad () {        arr_dc.clear()        arr_dc.add(0, "Бонусы")        arr_dc.add(1, "Уровень скидки")        arr_dc.add(2, "Система скидок")        dc_page.visibility = View.GONE        dc_appbar.visibility = View.GONE        dc_status.visibility = View.GONE        varApp.nav_view.visibility = View.GONE        dc_pb.visibility = View.VISIBLE        dc_presenter.onLoad()    }    fun onEvents() {        //TODO click update:        status_update.setOnClickListener {            onLoad()            onEvents()        }        //TODO click back:        some_addbar_view_back.setOnClickListener {            varApp.delete_step_from_BackStack(varApp.supportFragmentManager, step = this::class.java.simpleName)        }    }    override fun onSuccess() {        dc_pb.visibility = View.GONE        dc_status.visibility = View.GONE        dc_page.visibility = View.VISIBLE        dc_appbar.visibility = View.VISIBLE        varApp.changeCustomAppBar(            standartAppBar_visible = false,            standartAppBar = (activity as AppCompatActivity).supportActionBar!!,            customAppBar = dc_appbar,            customAppBar_backgroundColor = R.color.primary,            some_appbar_img_back = true,            some_title_text = "Дисконтная карта",            some_title_textColor = R.color.white,            some_btn_clear_text = "",            some_btn_clear_textColor = R.color.white,            some_btn_clear_visible = false        )        varApp.nav_view.visibility = View.VISIBLE        dc_card_number.text = dc.code        dc_bonus.text = varApp.RoundToInteger(dc.balance.toString(), false, "Int").toString()        dc_discount_percentage.text = dc.vid        arr_dc2.clear()        arr_dc2.add(0, varApp.RoundToInteger(dc.balance.toString(), false, "Int").toString())        arr_dc2.add(1, dc.vid)        arr_dc2.add(2, "")        dc_rv.visibility = View.VISIBLE        dc_rv.setHasFixedSize(true)        dc_rv.layoutManager = LinearLayoutManager(this.context, LinearLayoutManager.VERTICAL, false)        dc_rv.adapter = AdapterDC()        dc_rv.addItemDecoration(DividerItemDecoration(this.context, DividerItemDecoration.VERTICAL))    }    override fun noInternet() {        dc_pb.visibility = View.GONE        dc_rv.visibility = View.GONE        dc_appbar.visibility = View.VISIBLE        varApp.changeCustomAppBar(            standartAppBar_visible = false,            standartAppBar = (activity as Main).supportActionBar!!,            customAppBar = dc_appbar,            customAppBar_backgroundColor = R.color.primary,            some_appbar_img_back = false,            some_title_text = varApp.heading_no_internet,            some_title_textColor = R.color.white,            some_btn_clear_text = "",            some_btn_clear_textColor = R.color.white,            some_btn_clear_visible = false)        varApp.nav_view.visibility = View.GONE        dc_status.visibility = View.VISIBLE    }    override fun isEmpty() {    }}//region Adapterclass AdapterDC : RecyclerView.Adapter<AdapterDCVH>() {    override fun getItemCount(): Int { return arr_dc.size }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): AdapterDCVH {        return  AdapterDCVH(LayoutInflater.from(parent.context).inflate(R.layout.element_item_rv, parent, false))    }    override fun onBindViewHolder(holder: AdapterDCVH, position: Int) {        val v = holder.itemView        v.name_rv.text = arr_dc[position]        v.name2_rv.visibility = View.VISIBLE        v.name2_rv.text = arr_dc2[position]        if (position == 0 || position == 1) {            v.img_right_rv.visibility = View.GONE        }    }}class AdapterDCVH(v: View) : RecyclerView.ViewHolder(v) {}//endregion//region PRESENTER@InjectViewStateclass dc_Presenter : MvpPresenter<DC_ViewState>() {    @Inject lateinit var backendModule: BackendModule    private val disposeBag = CompositeDisposable()    fun onLoad () {        varApp.appComponent.inject(this)        disposeBag.add(            backendModule.provideMyGet().GetDCInfo(varApp.iam[0].dc, varApp.SID)                .delay(varApp.delay_default, varApp.typeUnit)                .subscribeOn(Schedulers.computation())                .observeOn(AndroidSchedulers.mainThread())                .subscribe ({                    dc = it                    viewState.onSuccess()//                    if (it.code != "") {////                    } else {//                        viewState.isEmpty()//                    }                }, {                    viewState.noInternet()                })        )    }    override fun onDestroy() {        super.onDestroy()        disposeBag.dispose()        disposeBag.clear()    }}//endregion